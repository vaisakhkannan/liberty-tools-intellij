name: Build

on:
  workflow_call:
    inputs:
      refLsp4ij:
        description: 'Reference/branch for Lsp4ij checkout'
        type: string
        required: true
        default: main
      lsp4ijBranch:
        description: 'PR number or branch name for Artifact upload'
        type: string
        required: true
      useLocalPlugin:
        description: 'Use lsp4ij locally'
        required: true
        type: boolean
        default: false
      refLTITag:
        description: 'Reference LTI Tag/Branch'
        type: string
        required: true
        default: main
  workflow_dispatch:
    inputs:
      useLocalPlugin:
        description: 'Use lsp4ij locally'
        required: true
        type: boolean
        default: false
      feature:
        description: 'If you checked this , then make sure to enter LSP4IJ PR number only in below'
        required: true
        type: boolean
        default: false
      refLsp4ij:
        description: 'Reference/branch for Lsp4ij checkout'
        type: string
        required: true
        default: main
      refLTITag:
        description: 'Reference LTI Tag/Branch'
        type: string
        required: false
        default: main
  push:
    branches: '**'
  pull_request:
    branches: [ main ]

jobs:
  fetch_merge_commit_sha_PR:
    runs-on: ubuntu-latest
    outputs:
      pr_details: ${{ steps.extract.outputs.pr_details }}
    env:
      API_URL: https://api.github.com/repos/redhat-developer/lsp4ij/pulls
      REF_LSP4IJNEW: ${{ inputs.refLsp4ij }}
    name: PR Details
    steps:
      - name: Extract PR numbers and merge_commit_shas
        if: ${{ inputs.feature == true }}
        shell: bash
        id: extract
        run: |
          # Fetch PR details from the GitHub API
          pr_infos=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "${{ env.API_URL }}")

          # Extract PR numbers and merge_commit_sha values, excluding draft pull requests
          pr_numbers=$(echo "$pr_infos" | jq -r '.[] | select(.draft == false) | {number: .number, sha: .merge_commit_sha} | @base64')          

          # Array to store PRs that are not drafts and have no merge conflicts
          declare -a valid_prs=()

          # for pr in $pr_numbers; do
            # Decode the base64 encoded JSON string
            pr=$(echo "$pr" | base64 --decode)

            # Extract PR number
            number=$(echo "$pr" | jq -r '.number')

            url="${{ env.API_URL }}/${{ env.REF_LSP4IJNEW }}"
            echo "url : $url"

            mergeable=null
            attempts=0
            max_attempts=5

            # Retry loop for checking mergeability
            while [[ "$mergeable" == "null" && $attempts -lt $max_attempts ]]; do
              pr_detail=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$url")
              mergeable=$(jq -r '.mergeable' <<< "$pr_detail")
              echo "PR Number ${{ env.REF_LSP4IJNEW }} Mergeable value now : $mergeable"

              if [[ "$mergeable" == "null" ]]; then
                echo "Mergeable status is null, retrying in 5 seconds..."
                sleep 5
              fi

              attempts=$((attempts + 1))
            done

            if [[ "$mergeable" == "null" ]]; then
              echo "::warning file=::PR #$(jq -r '.number' <<< "$pr_detail") still has Mergeable value of 'null' after $max_attempts attempts."
            fi

            if [[ "$mergeable" != "false" ]]; then
              pr_number=$(jq -r '.number' <<< "$pr_detail")
              pr_sha=$(jq -r '.merge_commit_sha' <<< "$pr_detail")
              pr_link=$(jq -r '.html_url' <<< "$pr_detail")
              valid_prs+=("{\"number\": \"$pr_number\", \"sha\": \"$pr_sha\", \"link\": \"$pr_link\"}")
            else
              echo "::warning file=::PR #$(jq -r '.number' <<< "$pr_detail") has conflicts. See : $(jq -r '.html_url' <<< "$pr_detail")"
            fi
          # done

          # Create a JSON string from the array
          pr_details_array=$(IFS=,; echo "[${valid_prs[*]}]")
          echo "PRs having no merge conflicts"
          echo "$pr_details_array" | jq '.[]'
          # Set the output for further steps
          echo "pr_details=$pr_details_array" >> $GITHUB_OUTPUT
          echo "pr_details_env=$pr_details_array" >> $GITHUB_ENV

          # Check if pr_details_array is empty
          if [ $(echo "$pr_details_array" | jq length) -eq 0 ]; then
            echo "::warning file=::There are no open PRs, or all the existing PRs are either drafts or have merge conflicts. Skipping further actions."
            echo "is_empty=true" >> $GITHUB_OUTPUT
          else
            echo "is_empty=false" >> $GITHUB_OUTPUT
          fi
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        runtime: [ linux, mac, windows ]
        include:
          - runtime: linux
            os: ubuntu-latest
            reportName: linux-test-report
          - runtime: mac
            os: macOS-latest
            reportName: mac-test-report
          - runtime: windows
            os: windows-latest
            reportName: windows-test-report
    env:
      USE_LOCAL_PLUGIN: ${{ inputs.useLocalPlugin || false }}
      RREF_LSP4IJ: ${{ fromJson(needs.fetch_merge_commit_sha_PR.outputs.pr_details) != null && fromJson(needs.fetch_merge_commit_sha_PR.outputs.pr_details) || inputs.refLsp4ij }}
      LSP4IJ_BRANCH: ${{ inputs.lsp4ijBranch || 'default' }}
      REF_LTI_TAG: ${{ inputs.refLTITag }}
    steps:
      - name: Configure pagefile
        if: contains(matrix.os, 'windows')
        uses: al-cheb/configure-pagefile-action@v1.4
        with:
          minimum-size: 8GB
          maximum-size: 10GB
          disk-root: "C:"
      - name: 'Checkout liberty-tools-intellij'
        uses: actions/checkout@v4
        with:
          path: liberty-tools-intellij
          ref: ${{ env.REF_LTI_TAG }}
      - name: 'Install required integration test software'
        working-directory: ./liberty-tools-intellij
        run: bash ./src/test/resources/ci/scripts/setup.sh

      # Checkout and build lsp4ij only if USE_LOCAL_PLUGIN is true
      - name: 'Checkout lsp4ij'
        if: ${{ inputs.useLocalPlugin == true }}
        uses: actions/checkout@v4
        with:
          repository: redhat-developer/lsp4ij
          path: lsp4ij
          ref: ${{ env.REF_LSP4IJ }}
      - name: 'Build Lsp4ij'
        if: ${{ inputs.useLocalPlugin == true }}
        working-directory: ./lsp4ij
        run: bash ./gradlew buildPlugin
      - name: 'Unzip lsp4ij file'
        if: ${{ inputs.useLocalPlugin == true }}
        working-directory: ./lsp4ij/build/distributions
        run: |
          unzip -o '*.zip' -d .

      - name: 'Build Liberty-Tools-Intellij'
        working-directory: ./liberty-tools-intellij
        run: bash ./gradlew buildPlugin -PuseLocal=${{ env.USE_LOCAL_PLUGIN }}
      - name: 'Archive artifacts'
        if: ${{ runner.os == 'Linux' && !failure() }}
        uses: actions/upload-artifact@v4.3.4
        with:
          name: liberty-tools-intellij-LTI-${{ env.REF_LTI_TAG || 'default' }}-LSP4IJ-${{ env.LSP4IJ_BRANCH }}
          path: |
            ./**/*liberty-tools-intellij*.zip
            ./**/libs/*liberty-tools-intellij*.jar
          if-no-files-found: warn
          retention-days: 7
      - name: 'Run UI integration tests'
        id: run_tests
        working-directory: ./liberty-tools-intellij
        run: bash ./src/test/resources/ci/scripts/run.sh
      - name: 'Archive Test logs and reports'
        if: ${{ failure() && steps.run_tests.conclusion == 'failure' }}
        uses: actions/upload-artifact@v4.3.4
        with:
          name: ${{ matrix.reportName }}-LTI-${{ env.REF_LTI_TAG || 'default' }}-LSP4IJ-${{ env.LSP4IJ_BRANCH }}
          path: |
            liberty-tools-intellij/build/reports/