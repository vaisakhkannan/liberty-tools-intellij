name: Fetch All Open Pull Requests using condition

on:
  workflow_dispatch:
  push:
    branches: '**'
  pull_request:
    branches: [ main, code-action-unification ]

jobs:
  fetch_all_pull_requests_and_notify_using_condition:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up cache
        id: cache
        uses: actions/cache@v2
        with:
          path: cache
          key: ${{ runner.os }}-pr-cache
          restore-keys: |
            ${{ runner.os }}-pr-cache

      - name: Fetch all opened pull request details using condition
        shell: bash
        id: fetch_all_pull_requests_using_condition
        run: |
          #mkdir -p cache

          pr_infos=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/redhat-developer/lsp4ij/pulls?state=open&sort=created&direction=desc&per_page=100")

          # Load previous PR data if exists
          if [ -f cache/notified_prs.json ]; then
            previous_prs=$(cat cache/notified_prs.json)
          else
            previous_prs="[]"
          fi

          pr_list=""
          new_notified_prs="[]"
          notify=false

          for pr_info in $(echo "$pr_infos" | jq -r '.[] | @base64'); do
            _jq() {
              echo "$pr_info" | base64 --decode | jq -r "${1}"
            }

            pr_number=$(_jq '.number')
            pr_title=$(_jq '.title')
            pr_user=$(_jq '.user.login')
            pr_url=$(_jq '.html_url')
            pr_draft=$(_jq '.draft')
            pr_created_at=$(_jq '.created_at')
            pr_updated_at=$(_jq '.updated_at')

            pr_data=$(jq -n --arg number "$pr_number" --arg updated_at "$pr_updated_at" '{number: $number, updated_at: $updated_at}')
            new_notified_prs=$(echo "$new_notified_prs" | jq --argjson pr_data "$pr_data" '. += [$pr_data]')

            # Check if the PR is new or updated
            previous_pr=$(echo "$previous_prs" | jq --arg number "$pr_number" '.[] | select(.number == $number)')
            if [ -z "$previous_pr" ] || [ "$(echo "$previous_pr" | jq -r '.updated_at')" != "$pr_updated_at" ]; then
              pr_list="${pr_list}\n*Pull Request* #${pr_number}: ${pr_title}\n*Created by*: ${pr_user}\n*URL*: ${pr_url}\n*Draft*: ${pr_draft}\n*Created At*: ${pr_created_at}\n*Last Updated At*: ${pr_updated_at}\n"
              notify=true
            fi
          done

          # Save current PR data for future comparison
          echo "$new_notified_prs" > cache/notified_prs.json

          if [ "$notify" = true ]; then
            echo -e "$pr_list" > pr_list.txt
            echo "true" > cache/notify.txt
          else
            echo "false" > cache/notify.txt
          fi

      - name: Send Slack notification
        if: success() && steps.fetch_all_pull_requests.outputs.notify == 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          pr_list=$(cat pr_list.txt)
          payload=$(cat <<-EOF
          {
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "List of Open Pull Requests"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "${pr_list}"
                }
              }
            ]
          }
          EOF
          )
          echo "$payload"
          curl -X POST -H 'Content-type: application/json' --data "$payload" $SLACK_WEBHOOK_URL

      - name: Save cache
        uses: actions/cache@v2
        with:
          path: cache
          key: ${{ runner.os }}-pr-cache
